---
  - hosts: all
    become: yes
    tasks:

    # Set system architecture fact
    - name: Get system architecture
      command: hostnamectl
      register: hostnamectl_output
      become: yes
   
    # Set architecture fact
    - name: Set architecture fact
      set_fact:
        system_architecture: >-
          {{
            'x86' if 'Architecture: x86-64' in hostnamectl_output.stdout else
            'arm'
          }}
    # Debug set architecture fact
    - name: Debug set architecture fact
      debug:
        msg: "System architecture set on host: {{ inventory_hostname }} to: {{ system_architecture }} "

#--------------------------------------------------------------
# Pre Reboot Tasks
#--------------------------------------------------------------

    - name: set hostname
      hostname:
        name: "{{ new_hostname }}"
      become: yes

    - name: Debug message after setting hostname
      debug:
        msg: "Hostname set to {{ new_hostname }} on {{ inventory_hostname }}."

    - name: Add host to group 'just_created' 
      ansible.builtin.add_host:
        name: '{{ new_hostname }}'
        groups: just_created

    - name: Debug message after adding host to group 'just_created'
      debug:
        msg: "Host {{ new_hostname }} added to group 'just_created' on {{ inventory_hostname }}."

    - name: reboot
      command: shutdown -r now
      async: 1
      poll: 0
      become: yes

    - name: Debug message after rebooting
      debug:
        msg: "Rebooting {{ inventory_hostname }}."

#--------------------------------------------------------------
# Post Reboot Tasks
#--------------------------------------------------------------
  - hosts: just_created
    become: yes
    tasks:

    - name: check connection
      wait_for_connection:
        timeout: 120
        sleep: 5

    - name: create user
      user:
        name: "{{ new_user }}"
        password: "{{ new_user_password }}"
        shell: /bin/bash
        groups: sudo
        append: yes
      become: yes

    - name: Debug message after creating user
      debug:
        msg: "User {{ new_user }} created successfully on {{ inventory_hostname }}."

    - name: set passwordless sudo for user
      lineinfile:
        path: /etc/sudoers
        state: present
        insertafter: '^%sudo'
        line: 'YOUR_USERNAME ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: set time zone
      timezone:
        name: "America/Chicago"
      become: yes

    - name: Update package list
      apt:
        update_cache: yes
      become: true

    - name: Debug message after updating package list
      debug:
        msg: "Package list updated successfully on {{ inventory_hostname }}."

    - name: Install common packages
      apt:
        name: 
          - rsyslog
          - git
          - nfs-common
          - net-tools
          - htop
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - curl
          - unzip
          - zip
          - nano
          - grep
          - tree
          - ntp
          - ntpstat
          - ntpdate
        update_cache: yes
        cache_valid_time: 86400
        state: latest
      become: true

    - name: Copy syslog config for Graylog
      copy:
        src: config_files/syslog/60-graylog.conf
        dest: /etc/rsyslog.d/60-graylog.conf
        owner: root
        group: root
        mode: '0644'
      become: yes
    - name: Debug message after copying syslog config
      debug:
        msg: "Copied syslog config for Graylog to /etc/rsyslog.d/60-graylog.conf on {{ inventory_hostname }}."

    - name: Restart rsyslog service
      service:
        name: rsyslog
        state: restarted
        enabled: yes
      become: yes
    - name: Debug message after restarting rsyslog
      debug:
        msg: "rsyslog service restarted and enabled on {{ inventory_hostname }}."

    - name: Add InfluxData GPG key
      shell: |
        curl --silent --location -O https://repos.influxdata.com/influxdata-archive.key
        echo "943666881a1b8d9b849b74caebf02d3465d6beb716510d86a39f6c8e8dac7515  influxdata-archive.key" | sha256sum -c -
        cat influxdata-archive.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive.gpg > /dev/null
      become: yes

    - name: Add InfluxData repository
      shell: |
        echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list
      become: yes

    - name: Update package list after adding InfluxData repository
      apt: update_cache=yes
      become: true
    - name: Debug message after updating package list
      debug:
        msg: "Package list updated successfully on {{ inventory_hostname }}."

    - name: Install Telegraf
      apt:
        name: telegraf
        state: latest
      become: true
    - name: Debug message after installing Telegraf
      debug:
        msg: "Telegraf installed successfully on {{ inventory_hostname }}."

    - name: Copy telegraf.conf for Pi
      copy:
        src: config_files/telegraf/telegraf_pi.conf
        dest: /etc/telegraf/telegraf.conf
        owner: root
        group: root
        mode: 0644
      become: yes
      when: system_architecture == 'arm'
    - name: Debug message after copying telegraf.conf for Pi
      debug:
        msg: "telegraf_pi.conf copied successfully to /etc/telegraf/telegraf.conf on {{ inventory_hostname }}."
      when: system_architecture == 'arm'

    - name: Copy telegraf.conf for x86
      copy:
        src: config_files/telegraf/telegraf_ubuntu.conf
        dest: /etc/telegraf/telegraf.conf
        owner: root
        group: root
        mode: 0644
      become: yes
      when: system_architecture == 'x86'
    - name: Debug message after copying telegraf.conf for x86
      debug:
        msg: "telegraf_ubuntu.conf copied successfully to /etc/telegraf/telegraf.conf on {{ inventory_hostname }}."
      when: system_architecture == 'x86'
      
    - name: Restart Telegraf
      service:
        name: telegraf
        state: restarted
        enabled: yes
      become: yes
    - name: Debug message after restarting Telegraf
      debug:
        msg: "Telegraf service restarted and enabled on {{ inventory_hostname }}."

    - name: Wait for 60 seconds
      wait_for:
        timeout: 60
    - name: Debug message after waiting for 60 seconds
      debug:
        msg: "Waited for 60 seconds on {{ inventory_hostname }}."

    - name: Get Telegraf status
      shell: systemctl status telegraf
      register: telegraf_status

    - name: Debug message after getting Telegraf status
      debug:
        msg: "Telegraf status on {{ inventory_hostname }}: {{ telegraf_status.stdout }}"
      when: telegraf_status.rc != 0

    - name: Debug message for successful Telegraf status
      debug:
        msg: "Telegraf is running successfully on {{ inventory_hostname }}."
      when: telegraf_status.rc == 0